/*
 * Pets API
 *
 * A simple API to manage pets
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DogsAPIController binds http requests to an api service and writes the service results to the http response
type DogsAPIController struct {
	service DogsAPIServicer
	errorHandler ErrorHandler
}

// DogsAPIOption for how the controller is set up.
type DogsAPIOption func(*DogsAPIController)

// WithDogsAPIErrorHandler inject ErrorHandler into controller
func WithDogsAPIErrorHandler(h ErrorHandler) DogsAPIOption {
	return func(c *DogsAPIController) {
		c.errorHandler = h
	}
}

// NewDogsAPIController creates a default api controller
func NewDogsAPIController(s DogsAPIServicer, opts ...DogsAPIOption) Router {
	controller := &DogsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DogsAPIController
func (c *DogsAPIController) Routes() Routes {
	return Routes{
		"GetDogs": Route{
			strings.ToUpper("Get"),
			"/dogs",
			c.GetDogs,
		},
	}
}

// GetDogs - Get a list of all dogs
func (c *DogsAPIController) GetDogs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDogs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
